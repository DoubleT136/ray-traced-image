/*

	//THEIR OBJECTS
	std::vector<std::shared_ptr<aiMaterial>> loadedMaterials;

    //std::vector<std::shared_ptr<MeshObject>> cubeObjects = MeshLoader::LoadMesh("CornellBox/CornellBox-Assignment7-Alt.obj", &loadedMaterials);
	//std::vector<std::shared_ptr<MeshObject>> cubeObjects = MeshLoader::LoadMesh("BB8 New/bb8.obj", &loadedMaterials);
	//std::vector<std::shared_ptr<MeshObject>> cubeObjects = MeshLoader::LoadMesh("modern_office_building/OfficeTowerV1.obj", &loadedMaterials);
	//std::vector<std::shared_ptr<MeshObject>> cubeObjects = MeshLoader::LoadMesh("2wtc_obj/2wtc.obj", &loadedMaterials);
	//std::vector<std::shared_ptr<MeshObject>> cubeObjects = MeshLoader::LoadMesh("Skyscraper.A/SkyA.obj", &loadedMaterials);
	std::vector<std::shared_ptr<MeshObject>> cubeObjects = MeshLoader::LoadMesh("background/background_better.obj", &loadedMaterials);
    for (size_t i = 0; i < cubeObjects.size(); ++i) {
        std::shared_ptr<Material> materialCopy = cubeMaterial->Clone();
        materialCopy->LoadMaterialFromAssimp(loadedMaterials[i]);
		cubeObjects[i]->SetMaterial(materialCopy);

        std::shared_ptr<SceneObject> cubeSceneObject = std::make_shared<SceneObject>();
        cubeSceneObject->AddMeshObject(cubeObjects[i]);
        cubeSceneObject->Rotate(glm::vec3(1.f, 0.f, 0.f), PI );
		//cubeSceneObject->Rotate(glm::vec3(0.f, 1.f, 0.f), -4.0f);
		cubeSceneObject->SetPosition(glm::vec3(0.f, 50.f, 0.f));
		cubeSceneObject->MultScale(4.f);

        cubeSceneObject->CreateAccelerationData(AccelerationTypes::BVH);
        cubeSceneObject->ConfigureAccelerationStructure([](AccelerationStructure* genericAccelerator) {
            BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
            accelerator->SetMaximumChildren(2);
            accelerator->SetNodesOnLeaves(2);
        });

        cubeSceneObject->ConfigureChildMeshAccelerationStructure([](AccelerationStructure* genericAccelerator) {
            BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
            accelerator->SetMaximumChildren(2);
            accelerator->SetNodesOnLeaves(2);
        });


        //newScene->AddSceneObject(cubeSceneObject);
    }

	//glm::vec3[] rotates = 

	addObject(newScene, 0.1f, "sky/sky.obj", glm::vec3(0.f, 50.f, 0.f), glm::vec3(1.f, 0.f, 0.f), PI, 4.f);

	std::vector<std::shared_ptr<aiMaterial>> loadedMaterials3;
	cubeMaterial->SetReflectivity(0.0f);

	std::vector<std::shared_ptr<MeshObject>> background2 = MeshLoader::LoadMesh("sky/sky.obj", &loadedMaterials3);
	for (size_t i = 0; i < background2.size(); ++i) {
		std::shared_ptr<Material> materialCopy = cubeMaterial->Clone();
		materialCopy->LoadMaterialFromAssimp(loadedMaterials3[i]);
		background2[i]->SetMaterial(materialCopy);

		std::shared_ptr<SceneObject> cubeSceneObject = std::make_shared<SceneObject>();
		cubeSceneObject->AddMeshObject(background2[i]);
		cubeSceneObject->Rotate(glm::vec3(1.f, 0.f, 0.f), PI);
		cubeSceneObject->Rotate(glm::vec3(0.f, 0.f, 1.f), PI/2);
		//cubeSceneObject->Rotate(glm::vec3(0.f, 1.f, 0.f), -4.0f);
		cubeSceneObject->SetPosition(glm::vec3(-7.f, 5.f, 0.f));
		cubeSceneObject->MultScale(3.f);

		cubeSceneObject->CreateAccelerationData(AccelerationTypes::BVH);
		cubeSceneObject->ConfigureAccelerationStructure([](AccelerationStructure* genericAccelerator) {
			BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
			accelerator->SetMaximumChildren(2);
			accelerator->SetNodesOnLeaves(2);
		});

		cubeSceneObject->ConfigureChildMeshAccelerationStructure([](AccelerationStructure* genericAccelerator) {
			BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
			accelerator->SetMaximumChildren(2);
			accelerator->SetNodesOnLeaves(2);
		});


		newScene->AddSceneObject(cubeSceneObject);
	}

	for (size_t i = 0; i < background2.size(); ++i) {
		std::shared_ptr<Material> materialCopy = cubeMaterial->Clone();
		materialCopy->LoadMaterialFromAssimp(loadedMaterials3[i]);
		background2[i]->SetMaterial(materialCopy);

		std::shared_ptr<SceneObject> cubeSceneObject = std::make_shared<SceneObject>();
		cubeSceneObject->AddMeshObject(background2[i]);
		cubeSceneObject->Rotate(glm::vec3(1.f, 0.f, 0.f), PI);
		cubeSceneObject->Rotate(glm::vec3(0.f, 0.f, 1.f), -PI / 2);
		//cubeSceneObject->Rotate(glm::vec3(0.f, 1.f, 0.f), -4.0f);
		cubeSceneObject->SetPosition(glm::vec3(7.f, 5.f, 0.f));
		cubeSceneObject->MultScale(3.f);

		cubeSceneObject->CreateAccelerationData(AccelerationTypes::BVH);
		cubeSceneObject->ConfigureAccelerationStructure([](AccelerationStructure* genericAccelerator) {
			BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
			accelerator->SetMaximumChildren(2);
			accelerator->SetNodesOnLeaves(2);
		});

		cubeSceneObject->ConfigureChildMeshAccelerationStructure([](AccelerationStructure* genericAccelerator) {
			BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
			accelerator->SetMaximumChildren(2);
			accelerator->SetNodesOnLeaves(2);
		});


		newScene->AddSceneObject(cubeSceneObject);
	}

	cubeMaterial->SetReflectivity(0.0f);

	for (size_t i = 0; i < cubeObjects.size(); ++i) {
		std::shared_ptr<Material> materialCopy = cubeMaterial->Clone();
		materialCopy->LoadMaterialFromAssimp(loadedMaterials[i]);
		cubeObjects[i]->SetMaterial(materialCopy);

		std::shared_ptr<SceneObject> cubeSceneObject = std::make_shared<SceneObject>();
		cubeSceneObject->AddMeshObject(cubeObjects[i]);
		cubeSceneObject->Rotate(glm::vec3(1.f, 0.f, 0.f), PI);
		cubeSceneObject->Rotate(glm::vec3(0.f, 0.f, 1.f), PI);
		//cubeSceneObject->Rotate(glm::vec3(0.f, 1.f, 0.f), -4.0f);
		cubeSceneObject->SetPosition(glm::vec3(0.f, -5.f, 0.f));
		cubeSceneObject->MultScale(3.f);

		cubeSceneObject->CreateAccelerationData(AccelerationTypes::BVH);
		cubeSceneObject->ConfigureAccelerationStructure([](AccelerationStructure* genericAccelerator) {
			BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
			accelerator->SetMaximumChildren(2);
			accelerator->SetNodesOnLeaves(2);
		});

		cubeSceneObject->ConfigureChildMeshAccelerationStructure([](AccelerationStructure* genericAccelerator) {
			BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
			accelerator->SetMaximumChildren(2);
			accelerator->SetNodesOnLeaves(2);
		});


		newScene->AddSceneObject(cubeSceneObject);
	}


	cubeMaterial->SetReflectivity(0.6f);
	//BUILDING
	std::vector<std::shared_ptr<aiMaterial>> loadedMaterials2;

	
	//std::vector<std::shared_ptr<MeshObject>> cubeObjects2 = MeshLoader::LoadMesh("robot/model.obj", &loadedMaterials2);
	std::vector<std::shared_ptr<MeshObject>> cubeObjects2 = MeshLoader::LoadMesh("skyscraper_01_obj/windows.obj", &loadedMaterials2);
	for (size_t i = 0; i < cubeObjects2.size(); ++i) {
		std::shared_ptr<Material> materialCopy = cubeMaterial->Clone();
		materialCopy->LoadMaterialFromAssimp(loadedMaterials2[i]);
		cubeObjects2[i]->SetMaterial(materialCopy);

		std::shared_ptr<SceneObject> cubeSceneObject = std::make_shared<SceneObject>();
		cubeSceneObject->AddMeshObject(cubeObjects2[i]);
		cubeSceneObject->Rotate(glm::vec3(1.f, 0.f, 0.f), PI / 2.f);
		//cubeSceneObject->Rotate(glm::vec3(0.f, 0.f, 1.f), -PI /1.2f);
		//cubeSceneObject->Rotate(glm::vec3(0.f, 1.f, 0.f), -4.0f);
		cubeSceneObject->SetPosition(glm::vec3(1.f, 7.f, -2.f));
		cubeSceneObject->MultScale(0.1f);

		cubeSceneObject->CreateAccelerationData(AccelerationTypes::BVH);
		cubeSceneObject->ConfigureAccelerationStructure([](AccelerationStructure* genericAccelerator) {
			BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
			accelerator->SetMaximumChildren(2);
			accelerator->SetNodesOnLeaves(2);
		});

		cubeSceneObject->ConfigureChildMeshAccelerationStructure([](AccelerationStructure* genericAccelerator) {
			BVHAcceleration* accelerator = dynamic_cast<BVHAcceleration*>(genericAccelerator);
			accelerator->SetMaximumChildren(2);
			accelerator->SetNodesOnLeaves(2);
		});


		newScene->AddSceneObject(cubeSceneObject);
	}*/